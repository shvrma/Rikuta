using JetBrains.Annotations;
using Rikuta.Models.Interactions;
using Rikuta.Models.Interactions.MessageComponents;

namespace Rikuta.Models.Resources.Channel;

/// <summary>
///     Represents a message sent in a channel within Discord.
/// </summary>
/// <param name="ID">
///     ID of the message.
/// </param>
/// <param name="ChannelID">
///     ID of the channel the message was sent in.
/// </param>
/// <param name="Author">
///     The author of this message. Not guaranteed to be a valid user;
///     for example, a Webhook can send a message; check it with the
///     <paramref name="WebhookID" /> property.
/// </param>
/// <param name="Content">
///     Contents of the message.
/// </param>
/// <param name="Timestamp">
///     When this message was sent.
/// </param>
/// <param name="EditedTimestamp">
///     When this message was edited (or null if never).
/// </param>
/// <param name="IsTts">
///     Whether this was a TTS message.
/// </param>
/// <param name="IsMentionEveryone">
///     Whether this message mentions everyone.
/// </param>
/// <param name="MentionedUsers">
///     Users specifically mentioned in the message.
/// </param>
/// <param name="MentionedRoles">
///     Roles specifically mentioned in this message.
/// </param>
/// <param name="MentionedChannels">
///     Channels specifically mentioned in this message. Only textual
///     channels that are visible to everyone in a lurkable guild will
///     ever be included. Only crossposted messages (via Channel
///     Following) currently include this field at all.
/// </param>
/// <param name="Attachments">
///     Any attached files.
/// </param>
/// <param name="Embeds">
///     Any embedded content.
/// </param>
/// <param name="Reactions">
///     Reactions to the message.
/// </param>
/// <param name="Nonce">
///     Used for validating a message was sent.
/// </param>
/// <param name="IsPinned">
///     Whether this message is pinned.
/// </param>
/// <param name="WebhookID">
///     If the message is generated by a Webhook,
///     this is the Webhook's ID.
/// </param>
/// <param name="MessageType">
///     <see cref="MessageType" /> type of message.
/// </param>
/// <param name="Activity">
///     Sent with Rich Presence-related chat embeds.
/// </param>
/// <param name="Application">
///     Sent with Rich Presence-related chat embeds.
/// </param>
/// <param name="ApplicationID">
///     If the message is an Interaction or application-owned webhook,
///     this is the ID of the application.
/// </param>
/// <param name="MessageReference">
///     Data showing the source of a cross-post, channel follow
///     add, pin, or reply message.
/// </param>
/// <param name="Flags">
///     <see cref="MessageFlags" /> combined as a bitfield.
/// </param>
/// <param name="ReferencedMessage">
///     The message associated with the
///     <paramref name="MessageReference" />. This field is only returned
///     for messages with a type of <see cref="MessageTypes.Reply" /> or
///     <see cref="MessageTypes.ThreadStarterMessage" /> (but not
///     guaranteed).
/// </param>
/// <param name="Interaction">
///     Sent if the message is a response to an Interaction.
/// </param>
/// <param name="Thread">
///     The thread that was started from this message, includes
///     <see cref="Channel.ThreadMember" />object.
/// </param>
/// <param name="Components">
///     Sent if the message contains components like buttons,
///     action rows, or other interactive components.
/// </param>
/// <param name="StickerItems">
///     Sent if the message contains stickers.
/// </param>
/// <param name="Position">
///     A generally increasing integer (there may be gaps or duplicates)
///     that represents the approximate position of the message in a
///     thread, it can be used to estimate the relative position of
///     the message in a thread in company with
///     <see cref="Channel.TotalMessageSentInThread" />
///     on parent thread.
/// </param>
/// <param name="RoleSubscriptionData">
///     Data of the role subscription purchase or renewal that prompted
///     this <see cref="MessageTypes.RoleSubscriptionPurchase" />
///     message.
/// </param>
/// <param name="ResolvedData">
///     Data for users, members, channels, and
///     roles in the message's auto-populated select menus.
/// </param>
/// <remarks>
///     An app will receive empty values in the
///     <paramref name="Content" />, <paramref name="Embeds" />,
///     <paramref name="Attachments" />, and
///     <paramref name="Components" /> fields if they have not configured
///     (or been approved for) the MESSAGE_CONTENT privileged intent.
/// </remarks>
[PublicAPI]
public record Message(
    [property: JsonPropertyNameOverride("id")]
    Snowflake ID,
    [property: JsonPropertyNameOverride("channel_id")]
    Snowflake ChannelID,
    [property: JsonPropertyNameOverride("author")]
    User.User Author,
    [property: JsonPropertyNameOverride("content")]
    string Content,
    [property: JsonPropertyNameOverride("timestamp")]
    DateTime Timestamp,
    [property: JsonPropertyNameOverride("edited_timestamp")]
    DateTime? EditedTimestamp,
    [property: JsonPropertyNameOverride("tts")]
    bool IsTts,
    [property: JsonPropertyNameOverride("mention_everyone")]
    bool IsMentionEveryone,
    [property: JsonPropertyNameOverride("mentions")]
    Optional<User.User[]> MentionedUsers,
    [property: JsonPropertyNameOverride("mention_roles")]
    Optional<Snowflake[]> MentionedRoles,
    [property: JsonPropertyNameOverride("mention_channels")]
    Optional<ChannelMention[]> MentionedChannels,
    [property: JsonPropertyNameOverride("attachments")]
    Attachment[] Attachments,
    [property: JsonPropertyNameOverride("embeds")]
    Embed[] Embeds,
    [property: JsonPropertyNameOverride("reactions")]
    Optional<MessageReaction[]> Reactions,
    [property: JsonPropertyNameOverride("nonce")]
    Optional<JsonValue> Nonce,
    [property: JsonPropertyNameOverride("pinned")]
    bool IsPinned,
    [property: JsonPropertyNameOverride("webhook_id")]
    Optional<Snowflake> WebhookID,
    [property: JsonPropertyNameOverride("type")]
    MessageTypes MessageType,
    [property: JsonPropertyNameOverride("activity")]
    Optional<MessageActivity> Activity,
    [property: JsonPropertyNameOverride("application")]
    Optional<Application.Application> Application,
    [property: JsonPropertyNameOverride("application_id")]
    Optional<Snowflake> ApplicationID,
    [property: JsonPropertyNameOverride("message_reference")]
    Optional<MessageReference> MessageReference,
    [property: JsonPropertyNameOverride("flags")]
    Optional<MessageFlags> Flags,
    [property: JsonPropertyNameOverride("referenced_message")]
    Optional<Message?> ReferencedMessage,
    [property: JsonPropertyNameOverride("interaction")]
    Optional<MessageInteraction> Interaction,
    [property: JsonPropertyNameOverride("thread")]
    Optional<Channel> Thread,
    [property: JsonPropertyNameOverride("components")]
    Optional<MessageComponent[]> Components,
    [property: JsonPropertyNameOverride("sticker_items")]
    Optional<MessageStickerItem[]> StickerItems,
    [property: JsonPropertyNameOverride("position")]
    Optional<int> Position,
    [property: JsonPropertyNameOverride("role_subscription_data")]
    Optional<RoleSubscriptionData> RoleSubscriptionData,
    [property: JsonPropertyNameOverride("resolved")]
    Optional<ResolvedData> ResolvedData);
